name: Build and Test

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]  # Trigger on version tags
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: write
  actions: read
  security-events: write

env:
  GO_VERSION: '1.24'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Verify Go build
      run: |
        echo "Testing build process..."
        go build -trimpath -ldflags "-s -w" -o test-binary ./cmd/memory-calculator
        ./test-binary --version
        rm test-binary

    - name: Run tests
      run: go test -v -race -timeout=10m -coverprofile=coverage.out ./...
      env:
        CGO_ENABLED: 1

    - name: Generate coverage report
      run: go tool cover -func=coverage.out

    - name: Run linting
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m --config .golangci.yml
        working-directory: .

    - name: Run security scan
      uses: securego/gosec@master
      with:
        args: '-no-fail -severity medium -confidence medium ./...'

    - name: Check for vulnerabilities
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: [amd64, arm64]
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Fetch all history for proper versioning

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Build binaries
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev-${GITHUB_SHA::8}")
        BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')
        COMMIT_HASH=${GITHUB_SHA::8}
        
        mkdir -p dist
        
        # Build standard binary
        BINARY_NAME="memory-calculator-${{ matrix.goos }}-${{ matrix.goarch }}"
        env CGO_ENABLED=0 go build \
          -trimpath -a \
          -ldflags "-X main.version=${VERSION} -X main.buildTime=${BUILD_TIME} -X main.commitHash=${COMMIT_HASH} -s -w" \
          -o "dist/${BINARY_NAME}" \
          ./cmd/memory-calculator
        
        # Build minimal binary
        MINIMAL_BINARY_NAME="memory-calculator-minimal-${{ matrix.goos }}-${{ matrix.goarch }}"
        env CGO_ENABLED=0 go build \
          -trimpath -a \
          -ldflags "-X main.version=${VERSION} -X main.buildTime=${BUILD_TIME} -X main.commitHash=${COMMIT_HASH} -s -w" \
          -tags minimal \
          -o "dist/${MINIMAL_BINARY_NAME}" \
          ./cmd/memory-calculator
        
        # Build static binary (Linux only)
        if [ "${{ matrix.goos }}" = "linux" ]; then
          STATIC_BINARY_NAME="memory-calculator-static-${{ matrix.goos }}-${{ matrix.goarch }}"
          
          # Install cross-compiler for ARM64
          if [ "${{ matrix.goarch }}" = "arm64" ]; then
            echo "Installing ARM64 cross-compiler..."
            sudo apt-get update || { echo "Failed to update package list"; exit 1; }
            sudo apt-get install -y gcc-aarch64-linux-gnu || { echo "Failed to install cross-compiler"; exit 1; }
            export CC=aarch64-linux-gnu-gcc
            echo "Cross-compiler installed successfully"
          fi
          
          env CGO_ENABLED=1 go build \
            -trimpath -a \
            -ldflags "-X main.version=${VERSION} -X main.buildTime=${BUILD_TIME} -X main.commitHash=${COMMIT_HASH} -s -w -linkmode external -extldflags '-static'" \
            -o "dist/${STATIC_BINARY_NAME}" \
            ./cmd/memory-calculator
        fi

    - name: Upload standard build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: memory-calculator-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/memory-calculator-${{ matrix.goos }}-${{ matrix.goarch }}
        retention-days: 7

    - name: Upload minimal build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: memory-calculator-minimal-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/memory-calculator-minimal-${{ matrix.goos }}-${{ matrix.goarch }}
        retention-days: 7

    - name: Upload static build artifacts
      if: matrix.goos == 'linux'
      uses: actions/upload-artifact@v4
      with:
        name: memory-calculator-static-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/memory-calculator-static-${{ matrix.goos }}-${{ matrix.goarch }}
        retention-days: 7

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Create dist directory
      run: mkdir -p dist

    - name: Download all build artifacts
      uses: actions/download-artifact@v5
      with:
        path: artifacts

    - name: Organize artifacts for release
      run: |
        echo "Organizing artifacts for release..."
        
        # Move all artifacts to dist directory
        find artifacts -type f -name "memory-calculator*" -exec mv {} dist/ \;
        
        # List all files that will be released
        echo "Files to be released:"
        ls -la dist/
        
        # Verify we have the expected files
        expected_files=(
          "memory-calculator-linux-amd64"
          "memory-calculator-linux-arm64"
          "memory-calculator-darwin-amd64"
          "memory-calculator-darwin-arm64"
          "memory-calculator-minimal-linux-amd64"
          "memory-calculator-minimal-linux-arm64"
          "memory-calculator-minimal-darwin-amd64"
          "memory-calculator-minimal-darwin-arm64"
          "memory-calculator-static-linux-amd64"
          "memory-calculator-static-linux-arm64"
        )
        
        missing_files=()
        for file in "${expected_files[@]}"; do
          if [ ! -f "dist/$file" ]; then
            missing_files+=("$file")
          fi
        done
        
        if [ ${#missing_files[@]} -gt 0 ]; then
          echo "Warning: Missing expected files:"
          printf '%s\n' "${missing_files[@]}"
        fi
        
        # Create checksums
        cd dist
        sha256sum * > checksums.txt
        echo "Checksums created:"
        cat checksums.txt

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/*
        generate_release_notes: true
        draft: false
        prerelease: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/memory-calculator
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set build time
      id: build_time
      run: echo "time=$(date -u '+%Y-%m-%d_%H:%M:%S')" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: Dockerfile
        target: alpine
        platforms: linux/amd64,linux/arm64
        push: ${{ secrets.DOCKER_USERNAME != '' && secrets.DOCKER_PASSWORD != '' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=docker-build
        cache-to: type=gha,mode=max,scope=docker-build
        build-args: |
          VERSION=${{ github.ref_name }}
          BUILD_TIME=${{ steps.build_time.outputs.time }}
          COMMIT_HASH=${{ github.sha }}

    - name: Test Docker image
      run: |
        echo "Testing Docker image functionality..."
        
        # Test version command
        echo "Testing --version command:"
        docker run --rm ${{ secrets.DOCKER_USERNAME }}/memory-calculator:latest --version || {
          echo "Version test failed"
          exit 1
        }
        
        # Test memory calculation
        echo "Testing memory calculation:"
        docker run --rm --memory=1g ${{ secrets.DOCKER_USERNAME }}/memory-calculator:latest --total-memory=1G --loaded-class-count=5000 --quiet || {
          echo "Memory calculation test failed"
          exit 1
        }
        
        echo "Docker image tests completed successfully"
