name: Build and Test

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]  # Trigger on version tags
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: write
  actions: read
  security-events: write

env:
  GO_VERSION: '1.24'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Run linting
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

    - name: Run security scan
      run: |
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        gosec ./...

    - name: Check for vulnerabilities
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: [amd64, arm64]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper versioning

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        # Set version and build info
        VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev-${GITHUB_SHA::8}")
        BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')
        COMMIT_HASH=${GITHUB_SHA::8}
        
        # Create dist directory
        mkdir -p dist
        
        # Build with ldflags
        BINARY_NAME="memory-calculator-${{ matrix.goos }}-${{ matrix.goarch }}"
        
        # Build with ldflags
        go build \
          -ldflags "-X main.version=${VERSION} -X main.buildTime=${BUILD_TIME} -X main.commitHash=${COMMIT_HASH}" \
          -o "dist/${BINARY_NAME}" \
          .

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: memory-calculator-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/
        retention-days: 7

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Build all platforms
      run: |
        mkdir -p dist
        
        # Get version from git tag
        VERSION=${GITHUB_REF#refs/tags/}
        BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')
        COMMIT_HASH=${GITHUB_SHA::8}
        
        # Build matrix
        declare -a platforms=(
          "linux/amd64"
          "linux/arm64"
          "darwin/amd64"
          "darwin/arm64"
        )
        
        for platform in "${platforms[@]}"; do
          IFS='/' read -r -a array <<< "$platform"
          GOOS="${array[0]}"
          GOARCH="${array[1]}"
          
          BINARY_NAME="memory-calculator-${GOOS}-${GOARCH}"
          
          echo "Building for $GOOS/$GOARCH..."
          env GOOS="$GOOS" GOARCH="$GOARCH" go build \
            -ldflags "-X main.version=${VERSION} -X main.buildTime=${BUILD_TIME} -X main.commitHash=${COMMIT_HASH}" \
            -o "dist/${BINARY_NAME}" \
            .
        done
        
        # Create checksums
        cd dist
        sha256sum * > checksums.txt
        cd ..

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/*
        generate_release_notes: true
        draft: false
        prerelease: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/memory-calculator
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ secrets.DOCKER_USERNAME != '' && secrets.DOCKER_PASSWORD != '' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
